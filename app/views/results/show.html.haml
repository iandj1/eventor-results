= content_for(:title, "Results | #{@event_name}")
=image_tag "OACT-Logo.svg", size: "150x150", align: "left"
%h1= @event_name
%p= @event.date.to_fs(:full_date)
%p= "Total Participants: #{@event.results.race_number(@race).count}"
%p=link_to "Results on Eventor", "#{EVENTOR_URL}/Events/ResultList?eventId=#{@event.eventor_id}"
%p=link_to "Event Info on Eventor", "#{EVENTOR_URL}/Events/Show/#{@event.eventor_id}"

- if @races.count > 1
  %br
  %p
    - @races.each do |race|
      = " | " unless race.number == 1
      - if race.number == @race
        = race.name
      - else
        %a= link_to race.name, results_path(race: race.number, by_class: (@by_class ? true : nil), merge_courses: (@merge_courses ? true : nil))
- else
  %br

%p
  - if @by_class
    = 'Results by Class'
  - else
    %a= link_to 'Results by Class', results_path(race: (@race==1 ? nil : @race), by_class: true)
  = '|'
  - if !@by_class && !@merge_courses
    = 'Results by Course'
  - else
    %a= link_to 'Results by Course', results_path(race: (@race==1 ? nil : @race))
  - if @dup_courses || @merge_courses
    = '|'
    - if @merge_courses
      = 'Results by Merged Courses'
    - else
      %a= link_to 'Results by Merged Courses', results_path(race: (@race==1 ? nil : @race), merge_courses: true)

%br{clear: "left"}

- @results_tables.each do |course_name, results|
  %h2= course_name
  %p= "Entries: #{results[:valid].count+results[:invalid].count}"
  - if @course_lengths[course_name].present?
    %p= "Length: #{@course_lengths[course_name].to_f/1000} km"

  %table.evt-results
    %tbody
      - if @control_sequences[course_name].length > 0
        %tr
          %th.sticky.header-row.col1.blank
          %th.sticky.header-row.col2.blank
          %th.sticky.header-row.blank{colspan: 2}
          - @control_sequences[course_name][0...-1].each_with_index do |leg, leg_number|
            %th.sticky.header-row
              %p.cell= "#{leg_number+1}"
              %p.cell= leg
          %th.sticky.header-row
            %br
            %p.cell F
          - extra_punches = (results[:valid]+results[:invalid]).any? { |result| result[:extras].present? }
          - if extra_punches
            %th.sticky.header-row.extras-column{colspan: 99}
              %p.cell extra
              %p.cell punches

      -# valid results
      - results[:valid].each do |result|
        %tr.classResult.OK
          %th.col1.sticky= result[:place]
          %th.header-col.personName.sticky.col2= result[:name]
          %th.header-col= result[:club]
          %th.header-col= format_time(result[:time])
          - result[:splits].each do |split|
            %td
              -place = split[:cumulative_time][:place]
              %div{class: "r r#{place}"}="#{format_time(split[:cumulative_time][:time])}#{place.nil? ? '' : ' ('+place.to_s+')'}"
              -place = split[:interval][:place]
              %div{class: "s s#{place}"}="#{format_time(split[:interval][:time])}#{place.nil? ? '' : ' ('+place.to_s+')'}"
          - if extra_punches
            %td.extras-column
          - result[:extras].each do |extra|
            %td
              %div.r=extra["control"]
              %div.s=format_time(extra["time"])

      -# invalid results
      - results[:invalid].each do |result|
        %tr.classResult.not-ok
          %th.header-col.sticky.col1
          %th.header-col.personName.sticky.col2= result[:name]
          %th.header-col= result[:club]
          %th.header-col
            .tooltip
              =result[:status]
              .tooltiptext= Result::STATUS_LOOKUP[result[:status]] || result[:status]
          - result[:splits].each do |split|
            %td
              %div.r=format_time(split[:cumulative_time])
              %div.s=format_time(split[:interval])
          - if extra_punches && result[:splits].present?
            %td.extras-column
          - result[:extras].each do |extra|
            %td
              %div.r=extra["control"]
              %div.s=format_time(extra["time"])